
i2c.bin:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000081e  00000892  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000081e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001bb4  00000000  00000000  000008a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001080  00000000  00000000  00002458  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000034d8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000034ec  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  0000352c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00003b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  000040c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000040dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 28 02 	call	0x450	; 0x450 <main>
  8e:	0c 94 0d 04 	jmp	0x81a	; 0x81a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <setupI2cSoftHost>:

static inline uint8_t getPin(PARAMETERLISTE) {
  return (*PIN & maske_) ? 1 : 0;
}
static inline void setOutput(PARAMETERLISTE) {
  *DDR |= maske_;
  96:	56 9a       	sbi	0x0a, 6	; 10
static inline void setTristate(PARAMETERLISTE) {
	*DDR &= ~maske_; 
	*PORT &= ~maske_; 
}
static inline void setPin(PARAMETERLISTE) {
  *PORT |= maske_;
  98:	5e 9a       	sbi	0x0b, 6	; 11

static inline uint8_t getPin(PARAMETERLISTE) {
  return (*PIN & maske_) ? 1 : 0;
}
static inline void setOutput(PARAMETERLISTE) {
  *DDR |= maske_;
  9a:	55 9a       	sbi	0x0a, 5	; 10
  9c:	08 95       	ret

0000009e <startI2c>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  9e:	81 e2       	ldi	r24, 0x21	; 33
  a0:	8a 95       	dec	r24
  a2:	f1 f7       	brne	.-4      	; 0xa0 <startI2c+0x2>
  a4:	55 9a       	sbi	0x0a, 5	; 10
static inline void setTristate(PARAMETERLISTE) {
	*DDR &= ~maske_; 
	*PORT &= ~maske_; 
}
static inline void setPin(PARAMETERLISTE) {
  *PORT |= maske_;
  a6:	5e 9a       	sbi	0x0b, 6	; 11
  a8:	8a e0       	ldi	r24, 0x0A	; 10
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <startI2c+0xc>
}
static inline void clrPin(PARAMETERLISTE) {
  *PORT &= ~maske_;
  ae:	5d 98       	cbi	0x0b, 5	; 11
  b0:	88 e1       	ldi	r24, 0x18	; 24
  b2:	8a 95       	dec	r24
  b4:	f1 f7       	brne	.-4      	; 0xb2 <startI2c+0x14>
  b6:	5e 98       	cbi	0x0b, 6	; 11
  b8:	08 95       	ret

000000ba <stopI2c>:

static inline uint8_t getPin(PARAMETERLISTE) {
  return (*PIN & maske_) ? 1 : 0;
}
static inline void setOutput(PARAMETERLISTE) {
  *DDR |= maske_;
  ba:	55 9a       	sbi	0x0a, 5	; 10
}
static inline void setPin(PARAMETERLISTE) {
  *PORT |= maske_;
}
static inline void clrPin(PARAMETERLISTE) {
  *PORT &= ~maske_;
  bc:	5d 98       	cbi	0x0b, 5	; 11
  be:	82 e2       	ldi	r24, 0x22	; 34
  c0:	98 2f       	mov	r25, r24
  c2:	9a 95       	dec	r25
  c4:	f1 f7       	brne	.-4      	; 0xc2 <stopI2c+0x8>
static inline void setTristate(PARAMETERLISTE) {
	*DDR &= ~maske_; 
	*PORT &= ~maske_; 
}
static inline void setPin(PARAMETERLISTE) {
  *PORT |= maske_;
  c6:	5e 9a       	sbi	0x0b, 6	; 11
  c8:	8a 95       	dec	r24
  ca:	f1 f7       	brne	.-4      	; 0xc8 <stopI2c+0xe>
  cc:	5d 9a       	sbi	0x0b, 5	; 11
  ce:	08 95       	ret

000000d0 <sendACK>:
  d0:	89 e0       	ldi	r24, 0x09	; 9
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <sendACK+0x2>

static inline uint8_t getPin(PARAMETERLISTE) {
  return (*PIN & maske_) ? 1 : 0;
}
static inline void setOutput(PARAMETERLISTE) {
  *DDR |= maske_;
  d6:	55 9a       	sbi	0x0a, 5	; 10
}
static inline void setPin(PARAMETERLISTE) {
  *PORT |= maske_;
}
static inline void clrPin(PARAMETERLISTE) {
  *PORT &= ~maske_;
  d8:	5d 98       	cbi	0x0b, 5	; 11
  da:	85 e1       	ldi	r24, 0x15	; 21
  dc:	8a 95       	dec	r24
  de:	f1 f7       	brne	.-4      	; 0xdc <sendACK+0xc>
static inline void setTristate(PARAMETERLISTE) {
	*DDR &= ~maske_; 
	*PORT &= ~maske_; 
}
static inline void setPin(PARAMETERLISTE) {
  *PORT |= maske_;
  e0:	5e 9a       	sbi	0x0b, 6	; 11
  e2:	82 e2       	ldi	r24, 0x22	; 34
  e4:	8a 95       	dec	r24
  e6:	f1 f7       	brne	.-4      	; 0xe4 <sendACK+0x14>
}
static inline void clrPin(PARAMETERLISTE) {
  *PORT &= ~maske_;
  e8:	5e 98       	cbi	0x0b, 6	; 11
  ea:	08 95       	ret

000000ec <sendNACK>:
  ec:	89 e0       	ldi	r24, 0x09	; 9
  ee:	8a 95       	dec	r24
  f0:	f1 f7       	brne	.-4      	; 0xee <sendNACK+0x2>

static inline uint8_t getPin(PARAMETERLISTE) {
  return (*PIN & maske_) ? 1 : 0;
}
static inline void setOutput(PARAMETERLISTE) {
  *DDR |= maske_;
  f2:	55 9a       	sbi	0x0a, 5	; 10
static inline void setTristate(PARAMETERLISTE) {
	*DDR &= ~maske_; 
	*PORT &= ~maske_; 
}
static inline void setPin(PARAMETERLISTE) {
  *PORT |= maske_;
  f4:	5d 9a       	sbi	0x0b, 5	; 11
  f6:	85 e1       	ldi	r24, 0x15	; 21
  f8:	8a 95       	dec	r24
  fa:	f1 f7       	brne	.-4      	; 0xf8 <sendNACK+0xc>
  fc:	5e 9a       	sbi	0x0b, 6	; 11
  fe:	82 e2       	ldi	r24, 0x22	; 34
 100:	8a 95       	dec	r24
 102:	f1 f7       	brne	.-4      	; 0x100 <sendNACK+0x14>
}
static inline void clrPin(PARAMETERLISTE) {
  *PORT &= ~maske_;
 104:	5e 98       	cbi	0x0b, 6	; 11
 106:	08 95       	ret

00000108 <readACK>:
 108:	89 e0       	ldi	r24, 0x09	; 9
 10a:	8a 95       	dec	r24
 10c:	f1 f7       	brne	.-4      	; 0x10a <readACK+0x2>
}
static inline void setOutput(PARAMETERLISTE) {
  *DDR |= maske_;
}
static inline void setInput(PARAMETERLISTE) {
  *DDR &= ~maske_;
 10e:	55 98       	cbi	0x0a, 5	; 10
 110:	85 e1       	ldi	r24, 0x15	; 21
 112:	8a 95       	dec	r24
 114:	f1 f7       	brne	.-4      	; 0x112 <readACK+0xa>
static inline void setTristate(PARAMETERLISTE) {
	*DDR &= ~maske_; 
	*PORT &= ~maske_; 
}
static inline void setPin(PARAMETERLISTE) {
  *PORT |= maske_;
 116:	5e 9a       	sbi	0x0b, 6	; 11
  volatile __attribute__((unused)) uint8_t *PORT, \
  volatile __attribute__((unused)) uint8_t *PIN,  \
  volatile __attribute__((unused)) uint8_t maske_

static inline uint8_t getPin(PARAMETERLISTE) {
  return (*PIN & maske_) ? 1 : 0;
 118:	99 b1       	in	r25, 0x09	; 9
 11a:	82 e2       	ldi	r24, 0x22	; 34
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <readACK+0x14>
}
static inline void setPin(PARAMETERLISTE) {
  *PORT |= maske_;
}
static inline void clrPin(PARAMETERLISTE) {
  *PORT &= ~maske_;
 120:	5e 98       	cbi	0x0b, 6	; 11
        ack = 0;
    else
        ack = 1;
    _delay_loop_1(26 + DLY_ADD);
    clrPin(SCL_PIN);
    return ack;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	95 fd       	sbrc	r25, 5
 126:	80 e0       	ldi	r24, 0x00	; 0
}
 128:	08 95       	ret

0000012a <sendI2cData>:

static inline uint8_t getPin(PARAMETERLISTE) {
  return (*PIN & maske_) ? 1 : 0;
}
static inline void setOutput(PARAMETERLISTE) {
  *DDR |= maske_;
 12a:	55 9a       	sbi	0x0a, 5	; 10
 12c:	28 e0       	ldi	r18, 0x08	; 8

void sendI2cData(uint8_t data) {
	uint8_t maske = 0b10000000;
 12e:	90 e8       	ldi	r25, 0x80	; 128
 130:	69 e0       	ldi	r22, 0x09	; 9
 132:	55 e1       	ldi	r21, 0x15	; 21
 134:	42 e2       	ldi	r20, 0x22	; 34
 136:	36 2f       	mov	r19, r22
 138:	3a 95       	dec	r19
 13a:	f1 f7       	brne	.-4      	; 0x138 <sendI2cData+0xe>
	setOutput(SDA_PIN);
	
	for (uint8_t b = 0; b < 8; b++) {
        _delay_loop_1(5 + DLY_ADD / 2);
        
        if ((data & maske) == maske)
 13c:	38 2f       	mov	r19, r24
 13e:	39 23       	and	r19, r25
 140:	39 13       	cpse	r19, r25
 142:	02 c0       	rjmp	.+4      	; 0x148 <sendI2cData+0x1e>
static inline void setTristate(PARAMETERLISTE) {
	*DDR &= ~maske_; 
	*PORT &= ~maske_; 
}
static inline void setPin(PARAMETERLISTE) {
  *PORT |= maske_;
 144:	5d 9a       	sbi	0x0b, 5	; 11
 146:	01 c0       	rjmp	.+2      	; 0x14a <sendI2cData+0x20>
}
static inline void clrPin(PARAMETERLISTE) {
  *PORT &= ~maske_;
 148:	5d 98       	cbi	0x0b, 5	; 11
            setPin(SDA_PIN);
        else
			clrPin(SDA_PIN);
        maske /= 2;
 14a:	96 95       	lsr	r25
 14c:	35 2f       	mov	r19, r21
 14e:	3a 95       	dec	r19
 150:	f1 f7       	brne	.-4      	; 0x14e <sendI2cData+0x24>
static inline void setTristate(PARAMETERLISTE) {
	*DDR &= ~maske_; 
	*PORT &= ~maske_; 
}
static inline void setPin(PARAMETERLISTE) {
  *PORT |= maske_;
 152:	5e 9a       	sbi	0x0b, 6	; 11
 154:	34 2f       	mov	r19, r20
 156:	3a 95       	dec	r19
 158:	f1 f7       	brne	.-4      	; 0x156 <sendI2cData+0x2c>
}
static inline void clrPin(PARAMETERLISTE) {
  *PORT &= ~maske_;
 15a:	5e 98       	cbi	0x0b, 6	; 11
 15c:	21 50       	subi	r18, 0x01	; 1

void sendI2cData(uint8_t data) {
	uint8_t maske = 0b10000000;
	setOutput(SDA_PIN);
	
	for (uint8_t b = 0; b < 8; b++) {
 15e:	59 f7       	brne	.-42     	; 0x136 <sendI2cData+0xc>
        _delay_loop_1(17 + DLY_ADD / 2);
		setPin(SCL_PIN);
        _delay_loop_1(26 + DLY_ADD);
        clrPin(SCL_PIN);
	}
}
 160:	08 95       	ret

00000162 <getI2cData>:
}
static inline void setOutput(PARAMETERLISTE) {
  *DDR |= maske_;
}
static inline void setInput(PARAMETERLISTE) {
  *DDR &= ~maske_;
 162:	55 98       	cbi	0x0a, 5	; 10
 164:	98 e0       	ldi	r25, 0x08	; 8

uint8_t getI2cData() {
    uint8_t maske = 0b10000000;
    uint8_t erg = 0;
 166:	80 e0       	ldi	r24, 0x00	; 0
        clrPin(SCL_PIN);
	}
}

uint8_t getI2cData() {
    uint8_t maske = 0b10000000;
 168:	20 e8       	ldi	r18, 0x80	; 128
 16a:	51 e2       	ldi	r21, 0x21	; 33
 16c:	69 e0       	ldi	r22, 0x09	; 9
 16e:	48 e1       	ldi	r20, 0x18	; 24
 170:	35 2f       	mov	r19, r21
 172:	3a 95       	dec	r19
 174:	f1 f7       	brne	.-4      	; 0x172 <getI2cData+0x10>
static inline void setTristate(PARAMETERLISTE) {
	*DDR &= ~maske_; 
	*PORT &= ~maske_; 
}
static inline void setPin(PARAMETERLISTE) {
  *PORT |= maske_;
 176:	5e 9a       	sbi	0x0b, 6	; 11
 178:	36 2f       	mov	r19, r22
 17a:	3a 95       	dec	r19
 17c:	f1 f7       	brne	.-4      	; 0x17a <getI2cData+0x18>
    for (uint8_t i = 0; i < 8; i++) {
        _delay_loop_1(25 + DLY_ADD);
        setPin(SCL_PIN);
        _delay_loop_1(5 + DLY_ADD / 2);
        
        if (getPin(SDA_PIN))
 17e:	4d 99       	sbic	0x09, 5	; 9
            erg += maske;
 180:	82 0f       	add	r24, r18
        maske /= 2;
 182:	26 95       	lsr	r18
 184:	34 2f       	mov	r19, r20
 186:	3a 95       	dec	r19
 188:	f1 f7       	brne	.-4      	; 0x186 <getI2cData+0x24>
}
static inline void clrPin(PARAMETERLISTE) {
  *PORT &= ~maske_;
 18a:	5e 98       	cbi	0x0b, 6	; 11
 18c:	91 50       	subi	r25, 0x01	; 1

uint8_t getI2cData() {
    uint8_t maske = 0b10000000;
    uint8_t erg = 0;
    setInput(SDA_PIN);
    for (uint8_t i = 0; i < 8; i++) {
 18e:	81 f7       	brne	.-32     	; 0x170 <getI2cData+0xe>
        
        _delay_loop_1(20 + DLY_ADD / 2);
        clrPin(SCL_PIN);
    }
    return erg;
}
 190:	08 95       	ret

00000192 <sendThis>:
void sendThis(uint8_t b);
char getHexDigit(char digit);

void sendThis(uint8_t b) {
//	sendDat(b); //für uart_attiny.h
    uart_Transmit_Hard(b);
 192:	0c 94 14 02 	jmp	0x428	; 0x428 <uart_Transmit_Hard>

00000196 <printSeriel>:
/*
 * Maximal 1 Byte
 * *txt: Text in dem Formatzeichen eingebettet sein können
 * Formatzeichen: %c: char, %s: string, %d: int8_t als dezimal, %h: int8_t als hex, %b: int8_t als bin 
 */
void printSeriel(char *txt, ...) {
 196:	2f 92       	push	r2
 198:	3f 92       	push	r3
 19a:	4f 92       	push	r4
 19c:	5f 92       	push	r5
 19e:	6f 92       	push	r6
 1a0:	7f 92       	push	r7
 1a2:	8f 92       	push	r8
 1a4:	9f 92       	push	r9
 1a6:	af 92       	push	r10
 1a8:	bf 92       	push	r11
 1aa:	cf 92       	push	r12
 1ac:	df 92       	push	r13
 1ae:	ef 92       	push	r14
 1b0:	ff 92       	push	r15
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	2a 97       	sbiw	r28, 0x0a	; 10
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	fe 01       	movw	r30, r28
 1cc:	7f 96       	adiw	r30, 0x1f	; 31
 1ce:	c1 90       	ld	r12, Z+
 1d0:	d1 90       	ld	r13, Z+
    char *ph = back; 
    int h;
    int maske = 0x80;
    int i = 1;

    va_start(args, txt);                //Parameterabfrage initialisieren
 1d2:	8f 01       	movw	r16, r30
    int n;
    char back[10];
    char *ph = back; 
    int h;
    int maske = 0x80;
    int i = 1;
 1d4:	88 24       	eor	r8, r8
 1d6:	83 94       	inc	r8
 1d8:	91 2c       	mov	r9, r1
    char *str;
    int n;
    char back[10];
    char *ph = back; 
    int h;
    int maske = 0x80;
 1da:	40 e8       	ldi	r20, 0x80	; 128
 1dc:	a4 2e       	mov	r10, r20
 1de:	b1 2c       	mov	r11, r1
    char *pt;
    char ch;
    char *str;
    int n;
    char back[10];
    char *ph = back; 
 1e0:	ce 01       	movw	r24, r28
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	7c 01       	movw	r14, r24
 1e6:	2c 01       	movw	r4, r24
                    if(n < 0) {				//Vorzeichen?
                        sendThis('-'); 
                        n = -n; 
                    }
                    while(n) { 				//Ziffern rueckwaerts nach back schreiben
                        h = n % 10; 
 1e8:	5a e0       	ldi	r21, 0x0A	; 10
 1ea:	25 2e       	mov	r2, r21
 1ec:	31 2c       	mov	r3, r1
    int maske = 0x80;
    int i = 1;

    va_start(args, txt);                //Parameterabfrage initialisieren
    
    for (pt = txt; *pt; pt++) {
 1ee:	d6 01       	movw	r26, r12
 1f0:	8c 91       	ld	r24, X
 1f2:	88 23       	and	r24, r24
 1f4:	09 f4       	brne	.+2      	; 0x1f8 <printSeriel+0x62>
 1f6:	d8 c0       	rjmp	.+432    	; 0x3a8 <printSeriel+0x212>
        if (*pt != '%') {               //Alle Zeichen ausser % ausgeben 
 1f8:	85 32       	cpi	r24, 0x25	; 37
 1fa:	21 f0       	breq	.+8      	; 0x204 <printSeriel+0x6e>
void sendThis(uint8_t b);
char getHexDigit(char digit);

void sendThis(uint8_t b) {
//	sendDat(b); //für uart_attiny.h
    uart_Transmit_Hard(b);
 1fc:	0e 94 14 02 	call	0x428	; 0x428 <uart_Transmit_Hard>
    va_start(args, txt);                //Parameterabfrage initialisieren
    
    for (pt = txt; *pt; pt++) {
        if (*pt != '%') {               //Alle Zeichen ausser % ausgeben 
            sendThis(*pt);
            continue;
 200:	36 01       	movw	r6, r12
 202:	cd c0       	rjmp	.+410    	; 0x39e <printSeriel+0x208>
        }
        
        switch (*(++pt)) {              //Formatkennzeichner abarbeiten
 204:	36 01       	movw	r6, r12
 206:	9f ef       	ldi	r25, 0xFF	; 255
 208:	69 1a       	sub	r6, r25
 20a:	79 0a       	sbc	r7, r25
 20c:	d6 01       	movw	r26, r12
 20e:	11 96       	adiw	r26, 0x01	; 1
 210:	8c 91       	ld	r24, X
 212:	83 36       	cpi	r24, 0x63	; 99
 214:	b1 f0       	breq	.+44     	; 0x242 <printSeriel+0xac>
 216:	64 f4       	brge	.+24     	; 0x230 <printSeriel+0x9a>
 218:	88 23       	and	r24, r24
 21a:	09 f4       	brne	.+2      	; 0x21e <printSeriel+0x88>
 21c:	c5 c0       	rjmp	.+394    	; 0x3a8 <printSeriel+0x212>
 21e:	82 36       	cpi	r24, 0x62	; 98
 220:	09 f0       	breq	.+2      	; 0x224 <printSeriel+0x8e>
 222:	bb c0       	rjmp	.+374    	; 0x39a <printSeriel+0x204>
                    while(ph > back)
                        sendThis(getHexDigit(*(--ph)));
                    break;
            
            case 'b':   //binär
                    n = (int)va_arg(args, int);
 224:	f8 01       	movw	r30, r16
 226:	c0 80       	ld	r12, Z
 228:	d1 80       	ldd	r13, Z+1	; 0x01
 22a:	0e 5f       	subi	r16, 0xFE	; 254
 22c:	1f 4f       	sbci	r17, 0xFF	; 255
                    
                    //sendThis('0');
                    //sendThis('b');
                    //sendThis(' ');
                    
                    for (; i < 5; ++i) {
 22e:	97 c0       	rjmp	.+302    	; 0x35e <printSeriel+0x1c8>
        if (*pt != '%') {               //Alle Zeichen ausser % ausgeben 
            sendThis(*pt);
            continue;
        }
        
        switch (*(++pt)) {              //Formatkennzeichner abarbeiten
 230:	88 36       	cpi	r24, 0x68	; 104
 232:	09 f4       	brne	.+2      	; 0x236 <printSeriel+0xa0>
 234:	47 c0       	rjmp	.+142    	; 0x2c4 <printSeriel+0x12e>
 236:	83 37       	cpi	r24, 0x73	; 115
 238:	71 f0       	breq	.+28     	; 0x256 <printSeriel+0xc0>
 23a:	84 36       	cpi	r24, 0x64	; 100
 23c:	09 f0       	breq	.+2      	; 0x240 <printSeriel+0xaa>
 23e:	ad c0       	rjmp	.+346    	; 0x39a <printSeriel+0x204>
 240:	18 c0       	rjmp	.+48     	; 0x272 <printSeriel+0xdc>
        
            case 'c': //char
                    ch = (char)va_arg(args, int);
 242:	68 01       	movw	r12, r16
 244:	b2 e0       	ldi	r27, 0x02	; 2
 246:	cb 0e       	add	r12, r27
 248:	d1 1c       	adc	r13, r1
void sendThis(uint8_t b);
char getHexDigit(char digit);

void sendThis(uint8_t b) {
//	sendDat(b); //für uart_attiny.h
    uart_Transmit_Hard(b);
 24a:	f8 01       	movw	r30, r16
 24c:	80 81       	ld	r24, Z
 24e:	0e 94 14 02 	call	0x428	; 0x428 <uart_Transmit_Hard>
        }
        
        switch (*(++pt)) {              //Formatkennzeichner abarbeiten
        
            case 'c': //char
                    ch = (char)va_arg(args, int);
 252:	86 01       	movw	r16, r12
 254:	a4 c0       	rjmp	.+328    	; 0x39e <printSeriel+0x208>
                    sendThis(ch); 
                    break;
            
            case 's': //string
                    str = (char*)va_arg(args, int*);
 256:	f8 01       	movw	r30, r16
 258:	c0 80       	ld	r12, Z
 25a:	d1 80       	ldd	r13, Z+1	; 0x01
 25c:	0e 5f       	subi	r16, 0xFE	; 254
 25e:	1f 4f       	sbci	r17, 0xFF	; 255
                    while(*str) {
 260:	d6 01       	movw	r26, r12
 262:	8d 91       	ld	r24, X+
 264:	6d 01       	movw	r12, r26
 266:	88 23       	and	r24, r24
 268:	09 f4       	brne	.+2      	; 0x26c <printSeriel+0xd6>
 26a:	99 c0       	rjmp	.+306    	; 0x39e <printSeriel+0x208>
void sendThis(uint8_t b);
char getHexDigit(char digit);

void sendThis(uint8_t b) {
//	sendDat(b); //für uart_attiny.h
    uart_Transmit_Hard(b);
 26c:	0e 94 14 02 	call	0x428	; 0x428 <uart_Transmit_Hard>
 270:	f7 cf       	rjmp	.-18     	; 0x260 <printSeriel+0xca>
                        str++;
                    } 
                    break;
            
            case 'd': //dezimal
                    n = (int)va_arg(args, int);
 272:	f8 01       	movw	r30, r16
 274:	c0 80       	ld	r12, Z
 276:	d1 80       	ldd	r13, Z+1	; 0x01
 278:	0e 5f       	subi	r16, 0xFE	; 254
 27a:	1f 4f       	sbci	r17, 0xFF	; 255
                    if(!n) {				//Gleich null?
 27c:	c1 14       	cp	r12, r1
 27e:	d1 04       	cpc	r13, r1
 280:	11 f4       	brne	.+4      	; 0x286 <printSeriel+0xf0>
void sendThis(uint8_t b);
char getHexDigit(char digit);

void sendThis(uint8_t b) {
//	sendDat(b); //für uart_attiny.h
    uart_Transmit_Hard(b);
 282:	80 e3       	ldi	r24, 0x30	; 48
 284:	1c c0       	rjmp	.+56     	; 0x2be <printSeriel+0x128>
            case 'd': //dezimal
                    n = (int)va_arg(args, int);
                    if(!n) {				//Gleich null?
                        sendThis('0'); 
                    }
                    if(n < 0) {				//Vorzeichen?
 286:	d7 fe       	sbrs	r13, 7
 288:	06 c0       	rjmp	.+12     	; 0x296 <printSeriel+0x100>
void sendThis(uint8_t b);
char getHexDigit(char digit);

void sendThis(uint8_t b) {
//	sendDat(b); //für uart_attiny.h
    uart_Transmit_Hard(b);
 28a:	8d e2       	ldi	r24, 0x2D	; 45
 28c:	0e 94 14 02 	call	0x428	; 0x428 <uart_Transmit_Hard>
                    if(!n) {				//Gleich null?
                        sendThis('0'); 
                    }
                    if(n < 0) {				//Vorzeichen?
                        sendThis('-'); 
                        n = -n; 
 290:	d1 94       	neg	r13
 292:	c1 94       	neg	r12
 294:	d1 08       	sbc	r13, r1
 296:	f7 01       	movw	r30, r14
 298:	7f 01       	movw	r14, r30
                    }
                    while(n) { 				//Ziffern rueckwaerts nach back schreiben
 29a:	c1 14       	cp	r12, r1
 29c:	d1 04       	cpc	r13, r1
 29e:	41 f0       	breq	.+16     	; 0x2b0 <printSeriel+0x11a>
                        h = n % 10; 
                        n = n / 10; 
 2a0:	c6 01       	movw	r24, r12
 2a2:	b1 01       	movw	r22, r2
 2a4:	0e 94 49 02 	call	0x492	; 0x492 <__divmodhi4>
 2a8:	6b 01       	movw	r12, r22
                        *ph++ = (char)('0' + h); 
 2aa:	80 5d       	subi	r24, 0xD0	; 208
 2ac:	81 93       	st	Z+, r24
 2ae:	f4 cf       	rjmp	.-24     	; 0x298 <printSeriel+0x102>
                    }
                    while(ph > back)        //Nun Ziffern ausgeben
 2b0:	4e 14       	cp	r4, r14
 2b2:	5f 04       	cpc	r5, r15
 2b4:	08 f0       	brcs	.+2      	; 0x2b8 <printSeriel+0x122>
 2b6:	73 c0       	rjmp	.+230    	; 0x39e <printSeriel+0x208>
void sendThis(uint8_t b);
char getHexDigit(char digit);

void sendThis(uint8_t b) {
//	sendDat(b); //für uart_attiny.h
    uart_Transmit_Hard(b);
 2b8:	f7 01       	movw	r30, r14
 2ba:	82 91       	ld	r24, -Z
 2bc:	7f 01       	movw	r14, r30
 2be:	0e 94 14 02 	call	0x428	; 0x428 <uart_Transmit_Hard>
 2c2:	f6 cf       	rjmp	.-20     	; 0x2b0 <printSeriel+0x11a>
                    while(ph > back)        //Nun Ziffern ausgeben
                        sendThis(*(--ph));
                    break;
                
            case 'h':   //hexa
                    n = (int)va_arg(args, int);
 2c4:	f8 01       	movw	r30, r16
 2c6:	c0 80       	ld	r12, Z
 2c8:	d1 80       	ldd	r13, Z+1	; 0x01
 2ca:	0e 5f       	subi	r16, 0xFE	; 254
 2cc:	1f 4f       	sbci	r17, 0xFF	; 255
void sendThis(uint8_t b);
char getHexDigit(char digit);

void sendThis(uint8_t b) {
//	sendDat(b); //für uart_attiny.h
    uart_Transmit_Hard(b);
 2ce:	80 e3       	ldi	r24, 0x30	; 48
 2d0:	0e 94 14 02 	call	0x428	; 0x428 <uart_Transmit_Hard>
 2d4:	88 e7       	ldi	r24, 0x78	; 120
 2d6:	0e 94 14 02 	call	0x428	; 0x428 <uart_Transmit_Hard>
                
            case 'h':   //hexa
                    n = (int)va_arg(args, int);
                    sendThis('0');
                    sendThis('x');
                    if (n == 0)
 2da:	c1 14       	cp	r12, r1
 2dc:	d1 04       	cpc	r13, r1
 2de:	21 f4       	brne	.+8      	; 0x2e8 <printSeriel+0x152>
void sendThis(uint8_t b);
char getHexDigit(char digit);

void sendThis(uint8_t b) {
//	sendDat(b); //für uart_attiny.h
    uart_Transmit_Hard(b);
 2e0:	80 e3       	ldi	r24, 0x30	; 48
 2e2:	0e 94 14 02 	call	0x428	; 0x428 <uart_Transmit_Hard>
 2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <printSeriel+0x15a>
                    n = (int)va_arg(args, int);
                    sendThis('0');
                    sendThis('x');
                    if (n == 0)
                        sendThis('0');
                    if (n < 16)
 2e8:	f0 e1       	ldi	r31, 0x10	; 16
 2ea:	cf 16       	cp	r12, r31
 2ec:	d1 04       	cpc	r13, r1
 2ee:	1c f4       	brge	.+6      	; 0x2f6 <printSeriel+0x160>
void sendThis(uint8_t b);
char getHexDigit(char digit);

void sendThis(uint8_t b) {
//	sendDat(b); //für uart_attiny.h
    uart_Transmit_Hard(b);
 2f0:	80 e3       	ldi	r24, 0x30	; 48
 2f2:	0e 94 14 02 	call	0x428	; 0x428 <uart_Transmit_Hard>
 2f6:	f7 01       	movw	r30, r14
 2f8:	7f 01       	movw	r14, r30
                    sendThis('x');
                    if (n == 0)
                        sendThis('0');
                    if (n < 16)
                        sendThis('0');
                    while(n) {
 2fa:	c1 14       	cp	r12, r1
 2fc:	d1 04       	cpc	r13, r1
 2fe:	e1 f0       	breq	.+56     	; 0x338 <printSeriel+0x1a2>
                        h = n % 16; 
 300:	c6 01       	movw	r24, r12
 302:	60 e1       	ldi	r22, 0x10	; 16
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	0e 94 49 02 	call	0x492	; 0x492 <__divmodhi4>
                        n = n / 16; 
 30a:	d7 fe       	sbrs	r13, 7
 30c:	03 c0       	rjmp	.+6      	; 0x314 <printSeriel+0x17e>
 30e:	9f e0       	ldi	r25, 0x0F	; 15
 310:	c9 0e       	add	r12, r25
 312:	d1 1c       	adc	r13, r1
 314:	24 e0       	ldi	r18, 0x04	; 4
 316:	d5 94       	asr	r13
 318:	c7 94       	ror	r12
 31a:	2a 95       	dec	r18
 31c:	e1 f7       	brne	.-8      	; 0x316 <printSeriel+0x180>
                        *ph++ = h; 
 31e:	81 93       	st	Z+, r24
 320:	eb cf       	rjmp	.-42     	; 0x2f8 <printSeriel+0x162>
 322:	d7 01       	movw	r26, r14
 324:	ee 91       	ld	r30, -X
 326:	7d 01       	movw	r14, r26
 328:	e0 31       	cpi	r30, 0x10	; 16
 32a:	50 f4       	brcc	.+20     	; 0x340 <printSeriel+0x1aa>
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	e0 50       	subi	r30, 0x00	; 0
 330:	ff 4f       	sbci	r31, 0xFF	; 255
 332:	80 81       	ld	r24, Z
void sendThis(uint8_t b);
char getHexDigit(char digit);

void sendThis(uint8_t b) {
//	sendDat(b); //für uart_attiny.h
    uart_Transmit_Hard(b);
 334:	0e 94 14 02 	call	0x428	; 0x428 <uart_Transmit_Hard>
                    while(n) {
                        h = n % 16; 
                        n = n / 16; 
                        *ph++ = h; 
                    }
                    while(ph > back)
 338:	4e 14       	cp	r4, r14
 33a:	5f 04       	cpc	r5, r15
 33c:	90 f3       	brcs	.-28     	; 0x322 <printSeriel+0x18c>
 33e:	2f c0       	rjmp	.+94     	; 0x39e <printSeriel+0x208>
                        sendThis(getHexDigit(*(--ph)));
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	f8 cf       	rjmp	.-16     	; 0x334 <printSeriel+0x19e>
                    //sendThis('0');
                    //sendThis('b');
                    //sendThis(' ');
                    
                    for (; i < 5; ++i) {
                        if (n & maske)
 344:	c5 01       	movw	r24, r10
 346:	8c 21       	and	r24, r12
 348:	9d 21       	and	r25, r13
 34a:	89 2b       	or	r24, r25
 34c:	69 f0       	breq	.+26     	; 0x368 <printSeriel+0x1d2>
void sendThis(uint8_t b);
char getHexDigit(char digit);

void sendThis(uint8_t b) {
//	sendDat(b); //für uart_attiny.h
    uart_Transmit_Hard(b);
 34e:	81 e3       	ldi	r24, 0x31	; 49
 350:	0e 94 14 02 	call	0x428	; 0x428 <uart_Transmit_Hard>
                    for (; i < 5; ++i) {
                        if (n & maske)
                            sendThis('1');
                        else
                            sendThis('0');
                        maske >>= 1;   
 354:	b5 94       	asr	r11
 356:	a7 94       	ror	r10
                    
                    //sendThis('0');
                    //sendThis('b');
                    //sendThis(' ');
                    
                    for (; i < 5; ++i) {
 358:	bf ef       	ldi	r27, 0xFF	; 255
 35a:	8b 1a       	sub	r8, r27
 35c:	9b 0a       	sbc	r9, r27
 35e:	e5 e0       	ldi	r30, 0x05	; 5
 360:	8e 16       	cp	r8, r30
 362:	91 04       	cpc	r9, r1
 364:	7c f3       	brlt	.-34     	; 0x344 <printSeriel+0x1ae>
 366:	02 c0       	rjmp	.+4      	; 0x36c <printSeriel+0x1d6>
void sendThis(uint8_t b);
char getHexDigit(char digit);

void sendThis(uint8_t b) {
//	sendDat(b); //für uart_attiny.h
    uart_Transmit_Hard(b);
 368:	80 e3       	ldi	r24, 0x30	; 48
 36a:	f2 cf       	rjmp	.-28     	; 0x350 <printSeriel+0x1ba>
 36c:	80 e2       	ldi	r24, 0x20	; 32
 36e:	0e 94 14 02 	call	0x428	; 0x428 <uart_Transmit_Hard>
                        else
                            sendThis('0');
                        maske >>= 1;   
                    }
                    sendThis(' ');
                    for (; i < 9; ++i) {
 372:	89 e0       	ldi	r24, 0x09	; 9
 374:	88 16       	cp	r8, r24
 376:	91 04       	cpc	r9, r1
 378:	94 f4       	brge	.+36     	; 0x39e <printSeriel+0x208>
                        if (n & maske)
 37a:	c5 01       	movw	r24, r10
 37c:	8c 21       	and	r24, r12
 37e:	9d 21       	and	r25, r13
 380:	89 2b       	or	r24, r25
 382:	11 f0       	breq	.+4      	; 0x388 <printSeriel+0x1f2>
void sendThis(uint8_t b);
char getHexDigit(char digit);

void sendThis(uint8_t b) {
//	sendDat(b); //für uart_attiny.h
    uart_Transmit_Hard(b);
 384:	81 e3       	ldi	r24, 0x31	; 49
 386:	01 c0       	rjmp	.+2      	; 0x38a <printSeriel+0x1f4>
 388:	80 e3       	ldi	r24, 0x30	; 48
 38a:	0e 94 14 02 	call	0x428	; 0x428 <uart_Transmit_Hard>
                    for (; i < 9; ++i) {
                        if (n & maske)
                            sendThis('1');
                        else
                            sendThis('0');
                        maske >>= 1;   
 38e:	b5 94       	asr	r11
 390:	a7 94       	ror	r10
                        else
                            sendThis('0');
                        maske >>= 1;   
                    }
                    sendThis(' ');
                    for (; i < 9; ++i) {
 392:	ff ef       	ldi	r31, 0xFF	; 255
 394:	8f 1a       	sub	r8, r31
 396:	9f 0a       	sbc	r9, r31
 398:	ec cf       	rjmp	.-40     	; 0x372 <printSeriel+0x1dc>
void sendThis(uint8_t b);
char getHexDigit(char digit);

void sendThis(uint8_t b) {
//	sendDat(b); //für uart_attiny.h
    uart_Transmit_Hard(b);
 39a:	0e 94 14 02 	call	0x428	; 0x428 <uart_Transmit_Hard>
    int maske = 0x80;
    int i = 1;

    va_start(args, txt);                //Parameterabfrage initialisieren
    
    for (pt = txt; *pt; pt++) {
 39e:	63 01       	movw	r12, r6
 3a0:	9f ef       	ldi	r25, 0xFF	; 255
 3a2:	c9 1a       	sub	r12, r25
 3a4:	d9 0a       	sbc	r13, r25
 3a6:	23 cf       	rjmp	.-442    	; 0x1ee <printSeriel+0x58>
                    sendThis(*pt); 
        }
    }
    
    va_end(args);						//Parameterabfrage beenden und Schluss
}
 3a8:	2a 96       	adiw	r28, 0x0a	; 10
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	1f 91       	pop	r17
 3ba:	0f 91       	pop	r16
 3bc:	ff 90       	pop	r15
 3be:	ef 90       	pop	r14
 3c0:	df 90       	pop	r13
 3c2:	cf 90       	pop	r12
 3c4:	bf 90       	pop	r11
 3c6:	af 90       	pop	r10
 3c8:	9f 90       	pop	r9
 3ca:	8f 90       	pop	r8
 3cc:	7f 90       	pop	r7
 3ce:	6f 90       	pop	r6
 3d0:	5f 90       	pop	r5
 3d2:	4f 90       	pop	r4
 3d4:	3f 90       	pop	r3
 3d6:	2f 90       	pop	r2
 3d8:	08 95       	ret

000003da <getHexDigit>:

char getHexDigit(char digit) {
 3da:	80 31       	cpi	r24, 0x10	; 16
 3dc:	30 f4       	brcc	.+12     	; 0x3ea <getHexDigit+0x10>
 3de:	e8 2f       	mov	r30, r24
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	e0 50       	subi	r30, 0x00	; 0
 3e4:	ff 4f       	sbci	r31, 0xFF	; 255
 3e6:	80 81       	ld	r24, Z
 3e8:	08 95       	ret
 3ea:	80 e0       	ldi	r24, 0x00	; 0
        case 13: return 'D';
        case 14: return 'E';
        case 15: return 'F';
    }
    return 0;
}
 3ec:	08 95       	ret

000003ee <initUartHW>:
#include "uart_hard.h"

void initUartHW(uint32_t baud) {
	uint16_t ubrr = (uint16_t)(F_CPU/16.0/baud-0.5);
 3ee:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__floatunsisf>
 3f2:	9b 01       	movw	r18, r22
 3f4:	ac 01       	movw	r20, r24
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	74 e2       	ldi	r23, 0x24	; 36
 3fa:	84 e7       	ldi	r24, 0x74	; 116
 3fc:	99 e4       	ldi	r25, 0x49	; 73
 3fe:	0e 94 de 02 	call	0x5bc	; 0x5bc <__divsf3>
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	5f e3       	ldi	r21, 0x3F	; 63
 40a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__subsf3>
 40e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__fixunssfsi>
	/* Baudrate setzen */
  UBRR0 = ubrr;
 412:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 416:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  /* Sender und Empfänger freigeben */
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 41a:	88 e1       	ldi	r24, 0x18	; 24
 41c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  /* Rahmenformat setzen: 8 Datenbits, 1 Stoppbits, keine Parität */
  UCSR0C = (3<<UCSZ00);
 420:	86 e0       	ldi	r24, 0x06	; 6
 422:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 426:	08 95       	ret

00000428 <uart_Transmit_Hard>:
}

void uart_Transmit_Hard(uint8_t data) {
  /* Warte bis Sendepuffer frei */
  while (!(UCSR0A & (1<<UDRE0))) ;
 428:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 42c:	95 ff       	sbrs	r25, 5
 42e:	fc cf       	rjmp	.-8      	; 0x428 <uart_Transmit_Hard>
  /* Put data into buffer, sends the data */
  UDR0 = data;
 430:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 434:	08 95       	ret

00000436 <free_uart_pins>:
}

void free_uart_pins() {
	UCSR0B &= ~((1<<RXEN0)|(1<<TXEN0));
 436:	e1 ec       	ldi	r30, 0xC1	; 193
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	87 7e       	andi	r24, 0xE7	; 231
 43e:	80 83       	st	Z, r24
 440:	08 95       	ret

00000442 <uart_Receive>:
 442:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 446:	87 ff       	sbrs	r24, 7
 448:	fc cf       	rjmp	.-8      	; 0x442 <uart_Receive>
 44a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 44e:	08 95       	ret

00000450 <main>:
//#include "i2c-client.h"

#define test3

int main() {
    initUartHW(9600);
 450:	60 e8       	ldi	r22, 0x80	; 128
 452:	75 e2       	ldi	r23, 0x25	; 37
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0e 94 f7 01 	call	0x3ee	; 0x3ee <initUartHW>
	setupI2cSoftHost();
 45c:	0e 94 4b 00 	call	0x96	; 0x96 <setupI2cSoftHost>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 460:	2f ef       	ldi	r18, 0xFF	; 255
 462:	81 ee       	ldi	r24, 0xE1	; 225
 464:	94 e0       	ldi	r25, 0x04	; 4
 466:	21 50       	subi	r18, 0x01	; 1
 468:	80 40       	sbci	r24, 0x00	; 0
 46a:	90 40       	sbci	r25, 0x00	; 0
 46c:	e1 f7       	brne	.-8      	; 0x466 <main+0x16>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <main+0x20>
 470:	00 00       	nop
    uint8_t adr = 2;
 472:	82 e0       	ldi	r24, 0x02	; 2
        stopI2c();
        printSeriel("%d %d %d %d\n", data[0], data[1], data[2], data[3]);
        
#endif
#ifdef test3
    uart_Transmit_Hard(adr++);
 474:	c1 e0       	ldi	r28, 0x01	; 1
 476:	c8 0f       	add	r28, r24
 478:	0e 94 14 02 	call	0x428	; 0x428 <uart_Transmit_Hard>
 47c:	2f ef       	ldi	r18, 0xFF	; 255
 47e:	83 ed       	ldi	r24, 0xD3	; 211
 480:	90 e3       	ldi	r25, 0x30	; 48
 482:	21 50       	subi	r18, 0x01	; 1
 484:	80 40       	sbci	r24, 0x00	; 0
 486:	90 40       	sbci	r25, 0x00	; 0
 488:	e1 f7       	brne	.-8      	; 0x482 <main+0x32>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <main+0x3c>
 48c:	00 00       	nop
 48e:	8c 2f       	mov	r24, r28
 490:	f1 cf       	rjmp	.-30     	; 0x474 <main+0x24>

00000492 <__divmodhi4>:
 492:	97 fb       	bst	r25, 7
 494:	07 2e       	mov	r0, r23
 496:	16 f4       	brtc	.+4      	; 0x49c <__divmodhi4+0xa>
 498:	00 94       	com	r0
 49a:	07 d0       	rcall	.+14     	; 0x4aa <__divmodhi4_neg1>
 49c:	77 fd       	sbrc	r23, 7
 49e:	09 d0       	rcall	.+18     	; 0x4b2 <__divmodhi4_neg2>
 4a0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <__udivmodhi4>
 4a4:	07 fc       	sbrc	r0, 7
 4a6:	05 d0       	rcall	.+10     	; 0x4b2 <__divmodhi4_neg2>
 4a8:	3e f4       	brtc	.+14     	; 0x4b8 <__divmodhi4_exit>

000004aa <__divmodhi4_neg1>:
 4aa:	90 95       	com	r25
 4ac:	81 95       	neg	r24
 4ae:	9f 4f       	sbci	r25, 0xFF	; 255
 4b0:	08 95       	ret

000004b2 <__divmodhi4_neg2>:
 4b2:	70 95       	com	r23
 4b4:	61 95       	neg	r22
 4b6:	7f 4f       	sbci	r23, 0xFF	; 255

000004b8 <__divmodhi4_exit>:
 4b8:	08 95       	ret

000004ba <__udivmodhi4>:
 4ba:	aa 1b       	sub	r26, r26
 4bc:	bb 1b       	sub	r27, r27
 4be:	51 e1       	ldi	r21, 0x11	; 17
 4c0:	07 c0       	rjmp	.+14     	; 0x4d0 <__udivmodhi4_ep>

000004c2 <__udivmodhi4_loop>:
 4c2:	aa 1f       	adc	r26, r26
 4c4:	bb 1f       	adc	r27, r27
 4c6:	a6 17       	cp	r26, r22
 4c8:	b7 07       	cpc	r27, r23
 4ca:	10 f0       	brcs	.+4      	; 0x4d0 <__udivmodhi4_ep>
 4cc:	a6 1b       	sub	r26, r22
 4ce:	b7 0b       	sbc	r27, r23

000004d0 <__udivmodhi4_ep>:
 4d0:	88 1f       	adc	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	5a 95       	dec	r21
 4d6:	a9 f7       	brne	.-22     	; 0x4c2 <__udivmodhi4_loop>
 4d8:	80 95       	com	r24
 4da:	90 95       	com	r25
 4dc:	bc 01       	movw	r22, r24
 4de:	cd 01       	movw	r24, r26
 4e0:	08 95       	ret

000004e2 <__subsf3>:
 4e2:	50 58       	subi	r21, 0x80	; 128

000004e4 <__addsf3>:
 4e4:	bb 27       	eor	r27, r27
 4e6:	aa 27       	eor	r26, r26
 4e8:	0e 94 89 02 	call	0x512	; 0x512 <__addsf3x>
 4ec:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_round>
 4f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__fp_pscA>
 4f4:	38 f0       	brcs	.+14     	; 0x504 <__addsf3+0x20>
 4f6:	0e 94 cc 03 	call	0x798	; 0x798 <__fp_pscB>
 4fa:	20 f0       	brcs	.+8      	; 0x504 <__addsf3+0x20>
 4fc:	39 f4       	brne	.+14     	; 0x50c <__addsf3+0x28>
 4fe:	9f 3f       	cpi	r25, 0xFF	; 255
 500:	19 f4       	brne	.+6      	; 0x508 <__addsf3+0x24>
 502:	26 f4       	brtc	.+8      	; 0x50c <__addsf3+0x28>
 504:	0c 94 c2 03 	jmp	0x784	; 0x784 <__fp_nan>
 508:	0e f4       	brtc	.+2      	; 0x50c <__addsf3+0x28>
 50a:	e0 95       	com	r30
 50c:	e7 fb       	bst	r30, 7
 50e:	0c 94 bc 03 	jmp	0x778	; 0x778 <__fp_inf>

00000512 <__addsf3x>:
 512:	e9 2f       	mov	r30, r25
 514:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__fp_split3>
 518:	58 f3       	brcs	.-42     	; 0x4f0 <__addsf3+0xc>
 51a:	ba 17       	cp	r27, r26
 51c:	62 07       	cpc	r22, r18
 51e:	73 07       	cpc	r23, r19
 520:	84 07       	cpc	r24, r20
 522:	95 07       	cpc	r25, r21
 524:	20 f0       	brcs	.+8      	; 0x52e <__addsf3x+0x1c>
 526:	79 f4       	brne	.+30     	; 0x546 <__addsf3x+0x34>
 528:	a6 f5       	brtc	.+104    	; 0x592 <__addsf3x+0x80>
 52a:	0c 94 06 04 	jmp	0x80c	; 0x80c <__fp_zero>
 52e:	0e f4       	brtc	.+2      	; 0x532 <__addsf3x+0x20>
 530:	e0 95       	com	r30
 532:	0b 2e       	mov	r0, r27
 534:	ba 2f       	mov	r27, r26
 536:	a0 2d       	mov	r26, r0
 538:	0b 01       	movw	r0, r22
 53a:	b9 01       	movw	r22, r18
 53c:	90 01       	movw	r18, r0
 53e:	0c 01       	movw	r0, r24
 540:	ca 01       	movw	r24, r20
 542:	a0 01       	movw	r20, r0
 544:	11 24       	eor	r1, r1
 546:	ff 27       	eor	r31, r31
 548:	59 1b       	sub	r21, r25
 54a:	99 f0       	breq	.+38     	; 0x572 <__addsf3x+0x60>
 54c:	59 3f       	cpi	r21, 0xF9	; 249
 54e:	50 f4       	brcc	.+20     	; 0x564 <__addsf3x+0x52>
 550:	50 3e       	cpi	r21, 0xE0	; 224
 552:	68 f1       	brcs	.+90     	; 0x5ae <__addsf3x+0x9c>
 554:	1a 16       	cp	r1, r26
 556:	f0 40       	sbci	r31, 0x00	; 0
 558:	a2 2f       	mov	r26, r18
 55a:	23 2f       	mov	r18, r19
 55c:	34 2f       	mov	r19, r20
 55e:	44 27       	eor	r20, r20
 560:	58 5f       	subi	r21, 0xF8	; 248
 562:	f3 cf       	rjmp	.-26     	; 0x54a <__addsf3x+0x38>
 564:	46 95       	lsr	r20
 566:	37 95       	ror	r19
 568:	27 95       	ror	r18
 56a:	a7 95       	ror	r26
 56c:	f0 40       	sbci	r31, 0x00	; 0
 56e:	53 95       	inc	r21
 570:	c9 f7       	brne	.-14     	; 0x564 <__addsf3x+0x52>
 572:	7e f4       	brtc	.+30     	; 0x592 <__addsf3x+0x80>
 574:	1f 16       	cp	r1, r31
 576:	ba 0b       	sbc	r27, r26
 578:	62 0b       	sbc	r22, r18
 57a:	73 0b       	sbc	r23, r19
 57c:	84 0b       	sbc	r24, r20
 57e:	ba f0       	brmi	.+46     	; 0x5ae <__addsf3x+0x9c>
 580:	91 50       	subi	r25, 0x01	; 1
 582:	a1 f0       	breq	.+40     	; 0x5ac <__addsf3x+0x9a>
 584:	ff 0f       	add	r31, r31
 586:	bb 1f       	adc	r27, r27
 588:	66 1f       	adc	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	c2 f7       	brpl	.-16     	; 0x580 <__addsf3x+0x6e>
 590:	0e c0       	rjmp	.+28     	; 0x5ae <__addsf3x+0x9c>
 592:	ba 0f       	add	r27, r26
 594:	62 1f       	adc	r22, r18
 596:	73 1f       	adc	r23, r19
 598:	84 1f       	adc	r24, r20
 59a:	48 f4       	brcc	.+18     	; 0x5ae <__addsf3x+0x9c>
 59c:	87 95       	ror	r24
 59e:	77 95       	ror	r23
 5a0:	67 95       	ror	r22
 5a2:	b7 95       	ror	r27
 5a4:	f7 95       	ror	r31
 5a6:	9e 3f       	cpi	r25, 0xFE	; 254
 5a8:	08 f0       	brcs	.+2      	; 0x5ac <__addsf3x+0x9a>
 5aa:	b0 cf       	rjmp	.-160    	; 0x50c <__addsf3+0x28>
 5ac:	93 95       	inc	r25
 5ae:	88 0f       	add	r24, r24
 5b0:	08 f0       	brcs	.+2      	; 0x5b4 <__addsf3x+0xa2>
 5b2:	99 27       	eor	r25, r25
 5b4:	ee 0f       	add	r30, r30
 5b6:	97 95       	ror	r25
 5b8:	87 95       	ror	r24
 5ba:	08 95       	ret

000005bc <__divsf3>:
 5bc:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__divsf3x>
 5c0:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_round>
 5c4:	0e 94 cc 03 	call	0x798	; 0x798 <__fp_pscB>
 5c8:	58 f0       	brcs	.+22     	; 0x5e0 <__divsf3+0x24>
 5ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__fp_pscA>
 5ce:	40 f0       	brcs	.+16     	; 0x5e0 <__divsf3+0x24>
 5d0:	29 f4       	brne	.+10     	; 0x5dc <__divsf3+0x20>
 5d2:	5f 3f       	cpi	r21, 0xFF	; 255
 5d4:	29 f0       	breq	.+10     	; 0x5e0 <__divsf3+0x24>
 5d6:	0c 94 bc 03 	jmp	0x778	; 0x778 <__fp_inf>
 5da:	51 11       	cpse	r21, r1
 5dc:	0c 94 07 04 	jmp	0x80e	; 0x80e <__fp_szero>
 5e0:	0c 94 c2 03 	jmp	0x784	; 0x784 <__fp_nan>

000005e4 <__divsf3x>:
 5e4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__fp_split3>
 5e8:	68 f3       	brcs	.-38     	; 0x5c4 <__divsf3+0x8>

000005ea <__divsf3_pse>:
 5ea:	99 23       	and	r25, r25
 5ec:	b1 f3       	breq	.-20     	; 0x5da <__divsf3+0x1e>
 5ee:	55 23       	and	r21, r21
 5f0:	91 f3       	breq	.-28     	; 0x5d6 <__divsf3+0x1a>
 5f2:	95 1b       	sub	r25, r21
 5f4:	55 0b       	sbc	r21, r21
 5f6:	bb 27       	eor	r27, r27
 5f8:	aa 27       	eor	r26, r26
 5fa:	62 17       	cp	r22, r18
 5fc:	73 07       	cpc	r23, r19
 5fe:	84 07       	cpc	r24, r20
 600:	38 f0       	brcs	.+14     	; 0x610 <__divsf3_pse+0x26>
 602:	9f 5f       	subi	r25, 0xFF	; 255
 604:	5f 4f       	sbci	r21, 0xFF	; 255
 606:	22 0f       	add	r18, r18
 608:	33 1f       	adc	r19, r19
 60a:	44 1f       	adc	r20, r20
 60c:	aa 1f       	adc	r26, r26
 60e:	a9 f3       	breq	.-22     	; 0x5fa <__divsf3_pse+0x10>
 610:	35 d0       	rcall	.+106    	; 0x67c <__divsf3_pse+0x92>
 612:	0e 2e       	mov	r0, r30
 614:	3a f0       	brmi	.+14     	; 0x624 <__divsf3_pse+0x3a>
 616:	e0 e8       	ldi	r30, 0x80	; 128
 618:	32 d0       	rcall	.+100    	; 0x67e <__divsf3_pse+0x94>
 61a:	91 50       	subi	r25, 0x01	; 1
 61c:	50 40       	sbci	r21, 0x00	; 0
 61e:	e6 95       	lsr	r30
 620:	00 1c       	adc	r0, r0
 622:	ca f7       	brpl	.-14     	; 0x616 <__divsf3_pse+0x2c>
 624:	2b d0       	rcall	.+86     	; 0x67c <__divsf3_pse+0x92>
 626:	fe 2f       	mov	r31, r30
 628:	29 d0       	rcall	.+82     	; 0x67c <__divsf3_pse+0x92>
 62a:	66 0f       	add	r22, r22
 62c:	77 1f       	adc	r23, r23
 62e:	88 1f       	adc	r24, r24
 630:	bb 1f       	adc	r27, r27
 632:	26 17       	cp	r18, r22
 634:	37 07       	cpc	r19, r23
 636:	48 07       	cpc	r20, r24
 638:	ab 07       	cpc	r26, r27
 63a:	b0 e8       	ldi	r27, 0x80	; 128
 63c:	09 f0       	breq	.+2      	; 0x640 <__divsf3_pse+0x56>
 63e:	bb 0b       	sbc	r27, r27
 640:	80 2d       	mov	r24, r0
 642:	bf 01       	movw	r22, r30
 644:	ff 27       	eor	r31, r31
 646:	93 58       	subi	r25, 0x83	; 131
 648:	5f 4f       	sbci	r21, 0xFF	; 255
 64a:	3a f0       	brmi	.+14     	; 0x65a <__divsf3_pse+0x70>
 64c:	9e 3f       	cpi	r25, 0xFE	; 254
 64e:	51 05       	cpc	r21, r1
 650:	78 f0       	brcs	.+30     	; 0x670 <__divsf3_pse+0x86>
 652:	0c 94 bc 03 	jmp	0x778	; 0x778 <__fp_inf>
 656:	0c 94 07 04 	jmp	0x80e	; 0x80e <__fp_szero>
 65a:	5f 3f       	cpi	r21, 0xFF	; 255
 65c:	e4 f3       	brlt	.-8      	; 0x656 <__divsf3_pse+0x6c>
 65e:	98 3e       	cpi	r25, 0xE8	; 232
 660:	d4 f3       	brlt	.-12     	; 0x656 <__divsf3_pse+0x6c>
 662:	86 95       	lsr	r24
 664:	77 95       	ror	r23
 666:	67 95       	ror	r22
 668:	b7 95       	ror	r27
 66a:	f7 95       	ror	r31
 66c:	9f 5f       	subi	r25, 0xFF	; 255
 66e:	c9 f7       	brne	.-14     	; 0x662 <__divsf3_pse+0x78>
 670:	88 0f       	add	r24, r24
 672:	91 1d       	adc	r25, r1
 674:	96 95       	lsr	r25
 676:	87 95       	ror	r24
 678:	97 f9       	bld	r25, 7
 67a:	08 95       	ret
 67c:	e1 e0       	ldi	r30, 0x01	; 1
 67e:	66 0f       	add	r22, r22
 680:	77 1f       	adc	r23, r23
 682:	88 1f       	adc	r24, r24
 684:	bb 1f       	adc	r27, r27
 686:	62 17       	cp	r22, r18
 688:	73 07       	cpc	r23, r19
 68a:	84 07       	cpc	r24, r20
 68c:	ba 07       	cpc	r27, r26
 68e:	20 f0       	brcs	.+8      	; 0x698 <__divsf3_pse+0xae>
 690:	62 1b       	sub	r22, r18
 692:	73 0b       	sbc	r23, r19
 694:	84 0b       	sbc	r24, r20
 696:	ba 0b       	sbc	r27, r26
 698:	ee 1f       	adc	r30, r30
 69a:	88 f7       	brcc	.-30     	; 0x67e <__divsf3_pse+0x94>
 69c:	e0 95       	com	r30
 69e:	08 95       	ret

000006a0 <__fixunssfsi>:
 6a0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__fp_splitA>
 6a4:	88 f0       	brcs	.+34     	; 0x6c8 <__fixunssfsi+0x28>
 6a6:	9f 57       	subi	r25, 0x7F	; 127
 6a8:	98 f0       	brcs	.+38     	; 0x6d0 <__fixunssfsi+0x30>
 6aa:	b9 2f       	mov	r27, r25
 6ac:	99 27       	eor	r25, r25
 6ae:	b7 51       	subi	r27, 0x17	; 23
 6b0:	b0 f0       	brcs	.+44     	; 0x6de <__fixunssfsi+0x3e>
 6b2:	e1 f0       	breq	.+56     	; 0x6ec <__fixunssfsi+0x4c>
 6b4:	66 0f       	add	r22, r22
 6b6:	77 1f       	adc	r23, r23
 6b8:	88 1f       	adc	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	1a f0       	brmi	.+6      	; 0x6c4 <__fixunssfsi+0x24>
 6be:	ba 95       	dec	r27
 6c0:	c9 f7       	brne	.-14     	; 0x6b4 <__fixunssfsi+0x14>
 6c2:	14 c0       	rjmp	.+40     	; 0x6ec <__fixunssfsi+0x4c>
 6c4:	b1 30       	cpi	r27, 0x01	; 1
 6c6:	91 f0       	breq	.+36     	; 0x6ec <__fixunssfsi+0x4c>
 6c8:	0e 94 06 04 	call	0x80c	; 0x80c <__fp_zero>
 6cc:	b1 e0       	ldi	r27, 0x01	; 1
 6ce:	08 95       	ret
 6d0:	0c 94 06 04 	jmp	0x80c	; 0x80c <__fp_zero>
 6d4:	67 2f       	mov	r22, r23
 6d6:	78 2f       	mov	r23, r24
 6d8:	88 27       	eor	r24, r24
 6da:	b8 5f       	subi	r27, 0xF8	; 248
 6dc:	39 f0       	breq	.+14     	; 0x6ec <__fixunssfsi+0x4c>
 6de:	b9 3f       	cpi	r27, 0xF9	; 249
 6e0:	cc f3       	brlt	.-14     	; 0x6d4 <__fixunssfsi+0x34>
 6e2:	86 95       	lsr	r24
 6e4:	77 95       	ror	r23
 6e6:	67 95       	ror	r22
 6e8:	b3 95       	inc	r27
 6ea:	d9 f7       	brne	.-10     	; 0x6e2 <__fixunssfsi+0x42>
 6ec:	3e f4       	brtc	.+14     	; 0x6fc <__fixunssfsi+0x5c>
 6ee:	90 95       	com	r25
 6f0:	80 95       	com	r24
 6f2:	70 95       	com	r23
 6f4:	61 95       	neg	r22
 6f6:	7f 4f       	sbci	r23, 0xFF	; 255
 6f8:	8f 4f       	sbci	r24, 0xFF	; 255
 6fa:	9f 4f       	sbci	r25, 0xFF	; 255
 6fc:	08 95       	ret

000006fe <__floatunsisf>:
 6fe:	e8 94       	clt
 700:	09 c0       	rjmp	.+18     	; 0x714 <__floatsisf+0x12>

00000702 <__floatsisf>:
 702:	97 fb       	bst	r25, 7
 704:	3e f4       	brtc	.+14     	; 0x714 <__floatsisf+0x12>
 706:	90 95       	com	r25
 708:	80 95       	com	r24
 70a:	70 95       	com	r23
 70c:	61 95       	neg	r22
 70e:	7f 4f       	sbci	r23, 0xFF	; 255
 710:	8f 4f       	sbci	r24, 0xFF	; 255
 712:	9f 4f       	sbci	r25, 0xFF	; 255
 714:	99 23       	and	r25, r25
 716:	a9 f0       	breq	.+42     	; 0x742 <__floatsisf+0x40>
 718:	f9 2f       	mov	r31, r25
 71a:	96 e9       	ldi	r25, 0x96	; 150
 71c:	bb 27       	eor	r27, r27
 71e:	93 95       	inc	r25
 720:	f6 95       	lsr	r31
 722:	87 95       	ror	r24
 724:	77 95       	ror	r23
 726:	67 95       	ror	r22
 728:	b7 95       	ror	r27
 72a:	f1 11       	cpse	r31, r1
 72c:	f8 cf       	rjmp	.-16     	; 0x71e <__floatsisf+0x1c>
 72e:	fa f4       	brpl	.+62     	; 0x76e <__floatsisf+0x6c>
 730:	bb 0f       	add	r27, r27
 732:	11 f4       	brne	.+4      	; 0x738 <__floatsisf+0x36>
 734:	60 ff       	sbrs	r22, 0
 736:	1b c0       	rjmp	.+54     	; 0x76e <__floatsisf+0x6c>
 738:	6f 5f       	subi	r22, 0xFF	; 255
 73a:	7f 4f       	sbci	r23, 0xFF	; 255
 73c:	8f 4f       	sbci	r24, 0xFF	; 255
 73e:	9f 4f       	sbci	r25, 0xFF	; 255
 740:	16 c0       	rjmp	.+44     	; 0x76e <__floatsisf+0x6c>
 742:	88 23       	and	r24, r24
 744:	11 f0       	breq	.+4      	; 0x74a <__floatsisf+0x48>
 746:	96 e9       	ldi	r25, 0x96	; 150
 748:	11 c0       	rjmp	.+34     	; 0x76c <__floatsisf+0x6a>
 74a:	77 23       	and	r23, r23
 74c:	21 f0       	breq	.+8      	; 0x756 <__floatsisf+0x54>
 74e:	9e e8       	ldi	r25, 0x8E	; 142
 750:	87 2f       	mov	r24, r23
 752:	76 2f       	mov	r23, r22
 754:	05 c0       	rjmp	.+10     	; 0x760 <__floatsisf+0x5e>
 756:	66 23       	and	r22, r22
 758:	71 f0       	breq	.+28     	; 0x776 <__floatsisf+0x74>
 75a:	96 e8       	ldi	r25, 0x86	; 134
 75c:	86 2f       	mov	r24, r22
 75e:	70 e0       	ldi	r23, 0x00	; 0
 760:	60 e0       	ldi	r22, 0x00	; 0
 762:	2a f0       	brmi	.+10     	; 0x76e <__floatsisf+0x6c>
 764:	9a 95       	dec	r25
 766:	66 0f       	add	r22, r22
 768:	77 1f       	adc	r23, r23
 76a:	88 1f       	adc	r24, r24
 76c:	da f7       	brpl	.-10     	; 0x764 <__floatsisf+0x62>
 76e:	88 0f       	add	r24, r24
 770:	96 95       	lsr	r25
 772:	87 95       	ror	r24
 774:	97 f9       	bld	r25, 7
 776:	08 95       	ret

00000778 <__fp_inf>:
 778:	97 f9       	bld	r25, 7
 77a:	9f 67       	ori	r25, 0x7F	; 127
 77c:	80 e8       	ldi	r24, 0x80	; 128
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	60 e0       	ldi	r22, 0x00	; 0
 782:	08 95       	ret

00000784 <__fp_nan>:
 784:	9f ef       	ldi	r25, 0xFF	; 255
 786:	80 ec       	ldi	r24, 0xC0	; 192
 788:	08 95       	ret

0000078a <__fp_pscA>:
 78a:	00 24       	eor	r0, r0
 78c:	0a 94       	dec	r0
 78e:	16 16       	cp	r1, r22
 790:	17 06       	cpc	r1, r23
 792:	18 06       	cpc	r1, r24
 794:	09 06       	cpc	r0, r25
 796:	08 95       	ret

00000798 <__fp_pscB>:
 798:	00 24       	eor	r0, r0
 79a:	0a 94       	dec	r0
 79c:	12 16       	cp	r1, r18
 79e:	13 06       	cpc	r1, r19
 7a0:	14 06       	cpc	r1, r20
 7a2:	05 06       	cpc	r0, r21
 7a4:	08 95       	ret

000007a6 <__fp_round>:
 7a6:	09 2e       	mov	r0, r25
 7a8:	03 94       	inc	r0
 7aa:	00 0c       	add	r0, r0
 7ac:	11 f4       	brne	.+4      	; 0x7b2 <__fp_round+0xc>
 7ae:	88 23       	and	r24, r24
 7b0:	52 f0       	brmi	.+20     	; 0x7c6 <__fp_round+0x20>
 7b2:	bb 0f       	add	r27, r27
 7b4:	40 f4       	brcc	.+16     	; 0x7c6 <__fp_round+0x20>
 7b6:	bf 2b       	or	r27, r31
 7b8:	11 f4       	brne	.+4      	; 0x7be <__fp_round+0x18>
 7ba:	60 ff       	sbrs	r22, 0
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <__fp_round+0x20>
 7be:	6f 5f       	subi	r22, 0xFF	; 255
 7c0:	7f 4f       	sbci	r23, 0xFF	; 255
 7c2:	8f 4f       	sbci	r24, 0xFF	; 255
 7c4:	9f 4f       	sbci	r25, 0xFF	; 255
 7c6:	08 95       	ret

000007c8 <__fp_split3>:
 7c8:	57 fd       	sbrc	r21, 7
 7ca:	90 58       	subi	r25, 0x80	; 128
 7cc:	44 0f       	add	r20, r20
 7ce:	55 1f       	adc	r21, r21
 7d0:	59 f0       	breq	.+22     	; 0x7e8 <__fp_splitA+0x10>
 7d2:	5f 3f       	cpi	r21, 0xFF	; 255
 7d4:	71 f0       	breq	.+28     	; 0x7f2 <__fp_splitA+0x1a>
 7d6:	47 95       	ror	r20

000007d8 <__fp_splitA>:
 7d8:	88 0f       	add	r24, r24
 7da:	97 fb       	bst	r25, 7
 7dc:	99 1f       	adc	r25, r25
 7de:	61 f0       	breq	.+24     	; 0x7f8 <__fp_splitA+0x20>
 7e0:	9f 3f       	cpi	r25, 0xFF	; 255
 7e2:	79 f0       	breq	.+30     	; 0x802 <__fp_splitA+0x2a>
 7e4:	87 95       	ror	r24
 7e6:	08 95       	ret
 7e8:	12 16       	cp	r1, r18
 7ea:	13 06       	cpc	r1, r19
 7ec:	14 06       	cpc	r1, r20
 7ee:	55 1f       	adc	r21, r21
 7f0:	f2 cf       	rjmp	.-28     	; 0x7d6 <__fp_split3+0xe>
 7f2:	46 95       	lsr	r20
 7f4:	f1 df       	rcall	.-30     	; 0x7d8 <__fp_splitA>
 7f6:	08 c0       	rjmp	.+16     	; 0x808 <__fp_splitA+0x30>
 7f8:	16 16       	cp	r1, r22
 7fa:	17 06       	cpc	r1, r23
 7fc:	18 06       	cpc	r1, r24
 7fe:	99 1f       	adc	r25, r25
 800:	f1 cf       	rjmp	.-30     	; 0x7e4 <__fp_splitA+0xc>
 802:	86 95       	lsr	r24
 804:	71 05       	cpc	r23, r1
 806:	61 05       	cpc	r22, r1
 808:	08 94       	sec
 80a:	08 95       	ret

0000080c <__fp_zero>:
 80c:	e8 94       	clt

0000080e <__fp_szero>:
 80e:	bb 27       	eor	r27, r27
 810:	66 27       	eor	r22, r22
 812:	77 27       	eor	r23, r23
 814:	cb 01       	movw	r24, r22
 816:	97 f9       	bld	r25, 7
 818:	08 95       	ret

0000081a <_exit>:
 81a:	f8 94       	cli

0000081c <__stop_program>:
 81c:	ff cf       	rjmp	.-2      	; 0x81c <__stop_program>
